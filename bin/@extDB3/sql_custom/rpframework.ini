[Default]

Version = 1  
;; Used incase there is ever a breaking change, or to inform user in log about a new feature.

Strip Chars = ";[]"
;; List of characters to strip out  
Strip Chars Mode = 0
;; 0 = Strip Bad Chars, 1 = Strip + Log Bad Chars, 2 = Return Error & Log Bad Chars  
;;     Note: Logging on works when sending data to database.


; --------------------------------------------------------------------------------
; SQL Statements https://bitbucket.org/torndeco/extdb3/wiki/extDB3%20-%20sql_custom.ini
; --------------------------------------------------------------------------------

[existPlayerInfo]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM users WHERE uid = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[existBankAccount]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM users WHERE bankaccount = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[playerBankBalance]
SQL1_1 = SELECT bank FROM users WHERE bankaccount=?;
SQL1_INPUTS = 1

OUTPUT = 1

[playerCashBalance]
SQL1_1 = SELECT cash FROM users WHERE bankaccount=?;
SQL1_INPUTS = 1

OUTPUT = 1

[updatePlayerBalance]
SQL1_1 = UPDATE users SET bank=? WHERE bankaccount=?;
SQL1_INPUTS = 1,2

[updatePlayerCash]
SQL1_1 = UPDATE users SET cash=? WHERE bankaccount=?;
SQL1_INPUTS = 1,2

[insertPlayerInfo]
SQL1_1 = INSERT INTO users (uid, name, items, clothes, position, phone) VALUES (?,?,?,?,?,?);
SQL1_INPUTS = 1,2,3,4,5,6

[updatePlayerInfo]
SQL1_1 = UPDATE users SET items=?, clothes=?, weapons=?, cash=?, bank=?, position=?, hunger=?, thirst=? WHERE uid=?;
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9

[playerInfo]
SQL1_1 = SELECT items, clothes, weapons, cash, bank, cop, ems, position, bankaccount, phone, hunger, thirst FROM users WHERE uid=?;
SQL1_INPUTS = 1

OUTPUT = 1,2,3,4,5,6,7,8,9,10-string,11,12

[updateUsersValueString]
Prepared Statement = false

SQL1_1 = UPDATE users
SQL1_2 =    SET $CUSTOM_3$ = "$CUSTOM_2"
SQL1_3 = WHERE uid = "$CUSTOM_1$;
SQL1_INPUTS = 3,1-mysql_escape,2-mysql_escape

[existPhone]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM users WHERE phone = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[updatePlayerMoney]
SQL1_1 = UPDATE users SET cash=?, bank=? WHERE bankaccount=?;
SQL1_INPUTS = 1,2,3

[playerMoney]
SQL1_1 = SELECT cash, bank FROM users WHERE bankaccount=?;
SQL1_INPUTS = 1

OUTPUT = 1,2

;---------------Keys-----------------

[keys]
SQL1_1 = SELECT id,krand FROM vk WHERE uid=?;
SQL1_INPUTS = 1

OUTPUT = 1,2-string

[insertKey]
SQL1_1 = INSERT INTO vk (uid,krand) VALUES (?,?);
SQL1_INPUTS = 1,2

[deleteKey]
SQL1_1 = DELETE FROM vk WHERE id=?;
SQL1_INPUTS = 1

[deleteKeys]
SQL1_1 = DELETE FROM vk WHERE krand=?;
SQL1_INPUTS = 1

[existKey]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM vk WHERE krand = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

; --------------------------------------------------------------------------------
; Optional Module Statements
; --------------------------------------------------------------------------------

; --- Phone ---
[contacts]
SQL1_1 = SELECT name, number, id FROM phonecontacts WHERE player=?;
SQL1_INPUTS = 1
OUTPUT = 1-string, 2-string, 3

[insertPhoneContact]
SQL1_1 = INSERT INTO phonecontacts (player, name, number) VALUES (?,?,?);
SQL1_INPUTS = 1, 2-add_escape_quotes, 3-add_escape_quotes

[updatePhoneContact]
SQL1_1 = UPDATE phonecontacts SET name=?, number=? WHERE id=?;
SQL1_INPUTS = 1-add_escape_quotes,2-add_escape_quotes,3

; --- Housing ---
[housingHouses]
SQL1_1 = SELECT * FROM houses;
OUTPUT = 1,2-string,3,4-string,5,6,7

[insertHouse]
SQL1_1 = INSERT INTO houses (class, pos, owner) VALUES (?,?,?);
SQL1_INPUTS = 1,2,3

[updateHouse]
SQL1_1 = UPDATE houses SET owner=?, price=? WHERE id=?;
SQL1_INPUTS = 1,2,3

[updateHouseTrunk]
SQL1_1 = UPDATE houses SET trunk=? WHERE id=?;
SQL1_INPUTS = 1,2

[updateHouseContainer]
SQL1_1 = UPDATE houses SET container=? WHERE id=?;
SQL1_INPUTS = 1,2


[houseOwnerBankAccount]
SQL1_1 = SELECT bankaccount FROM users WHERE uid=?;
SQL1_INPUTS = 1
OUTPUT = 1

[houseId]
SQL1_1 = SELECT id FROM houses WHERE pos=?;
SQL1_INPUTS = 1
OUTPUT = 1

; --- Police+ ---
[ppDBFetchCriminal]
SQL1_1 = SELECT * FROM criminals WHERE name LIKE ?;
SQL1_INPUTS = 1-add_escape_quotes
OUTPUT = 1,2-string,3-string

[ppDBFetchCrimes]
SQL1_1 = SELECT crime, date FROM crimes WHERE criminal=?;
SQL1_INPUTS = 1
OUTPUT = 1-string,2

[ppDBExistsCriminal]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM criminals WHERE name = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1-add_escape_quotes

[ppDBinsertCriminal]
SQL1_1 = INSERT INTO criminals (name) VALUES (?);
SQL1_INPUTS = 1-add_escape_quotes

[ppDBdeleteCriminal]
SQL1_1 = DELETE FROM criminals WHERE id=?;
SQL1_INPUTS = 1

[ppDBupdateCriminal]
SQL1_1 = UPDATE criminals SET wanted=? WHERE id=?;
SQL1_INPUTS = 1-add_escape_quotes,2

[ppDBinsertCrime]
SQL1_1 = INSERT INTO crimes (crime, criminal, date) VALUES (?,?,?);
SQL1_INPUTS = 1-add_escape_quotes,2,3-time

; --- Garage ---
[garageVehicles]
SQL1_1 = SELECT * FROM garage WHERE user=? AND inGarage=1;
SQL1_INPUTS = 1

OUTPUT = 1, 2-string, 3, 4, 5-string, 6

[insertVehicle]
SQL1_1 = INSERT INTO garage (class, user, hit, krand) VALUES (?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4

[deleteVehicle]
SQL1_1 = DELETE FROM garage WHERE krand=?;
SQL1_INPUTS = 1

[resetVehicles]
SQL1_1 = UPDATE garage SET inGarage = 1;

[getVehicleStatus]
SQL1_1 = SELECT inGarage FROM garage WHERE krand=?;
SQL1_INPUTS = 1

[updateVehicle]
SQL1_1 = UPDATE garage SET inGarage=? WHERE krand=?;
SQL1_INPUTS = 1,2

; --- Licenses ---
[playerLicenses]
SQL1_1 = SELECT id, name, license FROM licenses WHERE uid=?;
SQL1_INPUTS = 1

OUTPUT = 1, 2-string, 3-string

[insertLicense]
SQL1_1 = INSERT INTO licenses (name, license, uid) VALUES (?,?,?);
SQL1_INPUTS = 1-add_escape_quotes, 2-add_escape_quotes, 3

[deleteLicense]
SQL1_1 = DELETE FROM licenses WHERE id=?;
SQL1_INPUTS = 1
